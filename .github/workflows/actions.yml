name: Deploy .NET
on:
  push:
    branches:
    - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Publish
      run: dotnet publish WebApi -o site
    - name: Generate deployment package
      run: cd site; zip -r ../deploy.zip . -x '*.git*'; cd ..
    - name: Upload .NET to artifact
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-zip
        path: deploy.zip
    - name: Check artifact
      run: unzip -l deploy.zip
    
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      ENV_NAME: "dotnet-api-test-dev"
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dotnet-zip
    - name: Unzip artifact
      run: unzip deploy.zip
    - name: Display structure of downloaded files
      run: ls -R
    - name: Setup EB CLI
      run: |
        python --version
        pip --version
        pip install awsebcli --upgrade --user
        eb --version
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 1800
        aws-region: 'us-east-1'
    - name: Create environment if doesn't exists
      run: |
        ENV_EXISTS='false'
        eb init dotnet-api-test --region 'us-east-1' --platform "64bit Amazon Linux 2023 v3.0.0 running .NET 6" 
        ENV_LIST=$(eb list)
        echo ${ENV_LIST}
        if [[ "${ENV_LIST}" == *"${ENV_NAME}"* ]]; then
          ENV_EXISTS='true'
        fi
        echo ${ENV_EXISTS}
        if [["$ENV_EXISTS" == 'false']]; then
          eb create ${ENV_NAME}
        fi
    - name: Deploy to EB
      run: | 
        eb deploy ${ENV_NAME} --staged
